load "lib/main/list-of"
load "nat-less"
load "lib/basic/prolog.ath"

define (int->nat n) :=
  (check ((integer-numeral? n) 
          (check ((n less? 1) zero)
                 (else (S (int->nat (n minus 1))))))
        (else n))

define (nat->int n) :=
  match n {
    zero => 0
  | (S k) => (plus (nat->int k) 1)
  | _ => n
  }
 #(transform-output eval [nat->int])

extend-module N {
    declare Max: [N N] -> N

    assert less2 := (forall ?x ?y . ?y < ?x ==> (Max ?x ?y) = ?x)
    assert not-less2 := 
        (forall ?x ?y . ~ (?y < ?x) ==> (Max ?x ?y) = ?y)
    define commutative :=  (forall ?x ?y . (Max ?x ?y) = (Max ?y ?x))
    define associative := 
        (forall ?x ?y ?z . (Max (Max ?x ?y) ?z) = (Max ?x (Max ?y ?z)))

    define idempotent := (forall ?x . (Max ?x ?x) = ?x)

    assert [idempotent commutative associative]
}


module Untyped {

    datatype Term := T | F
                    | (if Term Term Term)


    define [a b c d] := [?a:Term ?b:Term ?c:Term ?d:Term]
    define [one + <= <] := [N.one N.+ N.<= N.<]
    define lte-def := N.Less=.definition

    define ++ := List.join
    define len := List.length
    define-sort TermSet := (List Term)
    declare consts: [Term] -> TermSet
    declare size: [Term] -> N
    declare depth: [Term] -> N



    transform-output size [nat->int]
    transform-output eval [nat->int]
    transform-output consts [(clist->alist id)]

    assert* consts-def := [
        ((consts T) = T::nil)
        ((consts F) = F::nil)
        (consts (if a b c) =  (consts a) ++ (consts b) ++ (consts c))
    ]


    assert*  size-def := [
        ((size T) = one)
        ((size F) = one)
        ((size (if a b c)) = (size a) + (size b) + (size c) + one)
    
    ]

    assert* depth-def := [
        ((depth T) = one)
        ((depth F) = one)
        ((depth (if a b c)) = (N.Max (N.Max (depth a) (depth b)) (depth c)))
    ]

}




# Chapter 3; Example 3.3.3
#   Lemma: The number of distinct constants in a term t is no greater than the
#   size of t (i.e., |Consts(t)| â‰¤ size(t)).

extend-module Untyped {
    define consts-lte-size := (forall a . len (consts a) <= (size a))
    define len-eq-size-for-const := method (cterm goal)
        match goal {
            ((some-quant q) (some-var v) body) =>
                let {
                    goal := try { 
                            (replace-term-in-sentence ?a:Term body cterm)
                            | body
                        };
                    len-c-eq-1 := (!chain-> [
                        (len (consts cterm)) 
                        = (len (cterm :: nil))
                        = (S (len nil:(List Term))) 
                        = (N.S N.zero) 
                        = one
                    ]);
                    size-t-eq-1 := (!claim ((size cterm) = one));
                    len-c-eq-size-t := (!chain [
                        (len (consts cterm))   
                        = one                      [len-c-eq-1]
                        = (size cterm)              [size-t-eq-1]
                    ])
                }
                (!chain-> [
                    len-c-eq-size-t
                    ==> (len (consts cterm) < (size cterm) | len-c-eq-size-t) 
                                [method (p) (!right-either (len (consts cterm) < (size cterm)) p)]
                    ==> (len (consts cterm) <= (size cterm)) [lte-def]
                ])
        }
    # End len-eq-size-for-const
     
  
    define len-lte-size-for-l1 := method (cterm)
        match cterm {
            ((some-symbol ctor) (some-var b)) =>    
                let {   
                        ih := ((len (consts b)) <= (size b));
                        _ := (!claim ih);
                        goal := ((len (consts (ctor b))) <= (size (ctor b)));
                        len-succ-a-reduced := (!chain-> [
                            (len (consts (ctor b)))
                            = (len (consts b))          [((consts (ctor b)) = (consts b))]
                        ]);
                        
                        size-succ-a := (!chain-> [
                            (size (ctor b)) 
                            = ((size b) + one)
                            = ((size b) + (N.S N.zero))
                            = (N.S ((size b) + N.zero))
                            = (N.S (size b))
                        ]);
                        size-succ-gt-size := (!chain-> [
                            T ==> ((size b) < (N.S (size b))) [N.Less.<S]
                        ])
                    }
                    (!chain-> [
                            T ==> (len (consts b) <= (size b))        [ih]
                                ==> (len (consts (ctor b)) <= (size b)) [len-succ-a-reduced]
                                ==> (len (consts (ctor b)) <= (N.S (size b))) [N.Less=.S2]
                                ==> (len (consts (ctor b)) <= (size (ctor b))) [size-succ-a]
                    ])
        }

    by-induction consts-lte-size {
        T => (!len-eq-size-for-const T consts-lte-size)
        | F => (!len-eq-size-for-const F consts-lte-size)
        | (cond as (if a b c)) => (!force ((len (consts (if a b c))) <= (size (if a b c))))

    }
}



extend-module Untyped {
    # Evaluation relation: t -> t' means t evaluates to t' in one step
    # If t is the state of the abstract machine at a given moment, then the machine can make *one* step (substitution/reduction)
    # and change its state to t'.
 
    module Semantics {
        define [a b c a' b' c' x y x' y'] := [?a:Term ?b:Term ?c:Term ?a':Term ?b':Term ?c':Term ?x:Term ?y:Term ?x':Term ?y':Term]
        declare reduce: [Term] -> Term
        assert* reduction-semantics := [
            (reduce T = T)
            (reduce F = F)
            
            # E-IF_T
            (reduce (if T b c) = reduce b)
            # E-IF_F
            (reduce (if F b c) = reduce c)
            #(reduce (if (if a' b' c') b c) = (reduce (if (reduce (if a' b' c')) b c)))
            
            # E-IF
            ((a =/= T & a =/= F) ==> (reduce (if a b c)) = (reduce (if (reduce a) b c)))
        ]

        define [reduce-iz-z reduce-iz-succ reduce-t reduce-f E-IF-T E-IF-F E-IF] := reduction-semantics
        
        (eval (reduce (if (if T T F) F T))) # F
        (eval (reduce (if T T F))) # T
        #(eval (reduce (if (iszero zero) T F))) # T



        ########### Evaluation Relation Formal Definition ###############
        # An *instance* of an inference rule is obtained by consistently
        # replacing each metavariable by the same term in the rule's conclusion and all its premises
        # until it can no longer be reduced

        # A rule is *satisfied* by a relation if, for each instance of the rule, either the conclusion is
        # in the relation or one of the premises is not
        # i.e., for some rule, forall terms, if the term is an instance of the rule then the instance itself is
        # in the relation, OR one of the premises of the inference rule is NOT in the relation


        # One step evaluation:
        # Denoted by the symbol " -> "
        # The smallest binary relation on terms satisfying all the inference rules.
        # If (t, t') is in the evaluation relation, then the evaluation "statement" or "judgement" t -> t' is *derivable*

       
        
      
    }
}


################## Induction on Derivations ##################

# The fact that an evaluation statement t -> t' is derivable if and only if there is a derivation
# tree with t -> t' as the label at its root helps us reason about properties of the eval relation
# This is done via a proof technique *induction on derivations*



# Example: Determinacy of One-Step Evaluation..
# I.e., if t -> t' and t -> t'' , then t' = t''
# From Ch3, Theorem 3.5.4 of Types and Programming Languages by Benjamin Pierce

extend-module Untyped {
    extend-module Semantics {
        define uprems := (cell [])
        define (inconsistent-axioms? ax) :=
            match (!prove F ax) 
            {
                F => T
                | _ => F
            }

        module InferenceSystem {

            datatype Judgement := (yields Term Term)
            datatype Proof := T-axiom
                              | F-axiom
                              | e-if-T-rule
                              | e-if-F-rule 
                              | (e-if-rule Proof)

            declare derives: [Proof Judgement] -> Boolean
            declare provable: [Judgement] -> Boolean
            define -->> := yields
            define |- := derives

            define [proof proof' proof1 proof2 p p' p1 p1' p2 p2' p3 p4] := 
            [
                ?proof:Proof ?proof':Proof ?proof1:Proof ?proof2:Proof ?p:Proof ?p':Proof
                ?p1:Proof ?p1':Proof ?p2:Proof ?p2':Proof ?p3:Proof ?p4:Proof
            ]

            define [judgement j j' j1 j2] := 
            [
                ?judgement:Judgement ?j:Judgement ?j':Judgement ?j1:Judgement ?j2:Judgement
            ]

            # Axioms of no junk, no confusion. See here for a nice discussion https://mathoverflow.net/questions/16180/formalizing-no-junk-no-confusion
            assert free-generation-axioms := (
                join (datatype-axioms "Proof")
                     (datatype-axioms "Judgement")
                     (datatype-axioms "Term")
            )


            assert* provable-def := (provable judgement <==> exists proof . proof |- judgement)
            assert* reduce-T-semantics := (T-axiom |- a -->> a' <==> a = a' & a = T)
            assert* reduce-F-semantics := (F-axiom |- a -->> a' <==> a = a' & a = F)
            
            assert e-if-T-semantics := (forall a a' . e-if-T-rule |- a -->> a' <==>
                                         (exists b c . a = (if T b c) & a' = b)
                                   )
            assert e-if-F-semantics := 
                (forall a a' . e-if-F-rule |- a -->> a' <==> (exists b c . a = (if F b c) & a' = c))


            assert e-if-semantics := (forall p a a' .  (e-if-rule p) |- a -->> a' 
                                        <==> (exists x x' y y' . a = (if x y y') & a' = (if x' y y') & (p |- x -->> x'))
            )
         
          
          
            define semantics := (join [provable-def reduce-T-semantics reduce-F-semantics 
                     e-if-T-semantics 
                     e-if-F-semantics 
                     e-if-semantics
            
            ])

            define full-semantics := (join semantics free-generation-axioms)
            
            define (determinacy p) := (forall p' a b c . p |- a -->> b & p' |- a -->> c ==> b = c)
            
            by-induction (forall p . determinacy p) {
                T-axiom => (!force (determinacy T-axiom))
                | F-axiom => (!force (determinacy F-axiom))
                | e-if-T-rule => (!force (determinacy e-if-T-rule))
                | e-if-F-rule => (!force (determinacy e-if-F-rule))
                | (proof as (e-if-rule proof')) => (!force (determinacy proof))
            }


        }

        module SemanticTests {
            open InferenceSystem


            (Prolog.auto-solve (e-if-T-rule |- (if _ _ _) -->> a))
            (Prolog.auto-solve (e-if-rule ?P |- (if _ _ _) -->> a))
            (Prolog.auto-solve (e-if-rule ?P |- (if (if _ _ _) _ _) -->> a))
        }
        
        # define determinacy := (forall a b c . ((reduce a) = b) & ((reduce a) = c) ==> b = c)

        # (!prove determinacy (filter (ab) assertion?))
        # by-induction determinacy {
        #     T => (!force (forall b c . ((reduce T) = b) & ((reduce T) = c) ==> b = c))
        #     | F => (!force (forall b c . ((reduce F) = b) & ((reduce F) = c) ==> b = c))
        #     | zero => (!force (forall b c . ((reduce zero) = b) & ((reduce zero) = c) ==> b = c))
        #     | (b' as (succ a)) => (!force (forall b c . ((reduce b') = b) & ((reduce b') = c) ==> b = c))
        #     | (b' as (pred a)) => (!force (forall b c . ((reduce b') = b) & ((reduce b') = c) ==> b = c))
        #     | (b' as (iszero a)) => (!force (forall b c . ((reduce b') = b) & ((reduce b') = c) ==> b = c))
        #     | (b' as (if a a' c')) => (!force (forall b c . ((reduce b') = b) & ((reduce b') = c) ==> b = c))
        #     }

    }
}